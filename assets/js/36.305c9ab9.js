(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{553:function(t,a,s){"use strict";s.r(a);var i=s(16),e=Object(i.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"缓存结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存结构"}},[t._v("#")]),t._v(" 缓存结构")]),t._v(" "),s("p",[t._v("一般情况下，缓存空间分为"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("S")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("S")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")])])])])]),t._v("个组，每个组又分为"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("E")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("E")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("E")])])])])]),t._v("行，在每一行中，存储了"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("B")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("B")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05017em"}},[t._v("B")])])])])]),t._v("字节（经过工业界的实践，目前缓存块一般为"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[t._v("64")]),s("mi",[t._v("B")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("64B")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("6")]),s("span",{staticClass:"mord"},[t._v("4")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05017em"}},[t._v("B")])])])])]),t._v("）的块（有效数据）以及有效位和标记位（元数据），所有缓存块的总大小为"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("C")]),s("mo",[t._v("=")]),s("mi",[t._v("S")]),s("mo",[t._v("×")]),s("mi",[t._v("E")]),s("mo",[t._v("×")]),s("mi",[t._v("B")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("C=S \\times E \\times B")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[t._v("=")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("×")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("E")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("×")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05017em"}},[t._v("B")])])])])]),t._v("个字节，元数据不包括在缓存空间大小内。\n")],1),t._v(" "),s("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20201213153320307.png",width:"60%",alt:"缓存结构示意图(来自CSAPP)"}}),t._v(" "),s("p",[t._v("内存地址被划分为三个部分，标记，组索引和块偏移：")]),t._v(" "),s("ul",[s("li",[t._v("标记：在每个组内唯一地标识缓存块，注意，在所有缓存块中该标识不唯一。")]),t._v(" "),s("li",[t._v("组索引：确定该缓存块存放于哪个组中。")]),t._v(" "),s("li",[t._v("块偏移：表示该地址在缓存块中的偏移地址。")])]),t._v(" "),s("p",[t._v("根据组中所包含的行的数量，大体可以把映射关系分为三类：")]),t._v(" "),s("ul",[s("li",[t._v("直接映射（direct-mapped）：每个组只有一行。")]),t._v(" "),s("li",[t._v("全相联（fully-associative）：整个缓存中只有一个组，组中包含所有的行。")]),t._v(" "),s("li",[t._v("组相联（set-associative）：即上图中所示的情况，分为"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("S")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("S")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")])])])])]),t._v("个组，每个组有"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("E")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("E")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("E")])])])])]),t._v("行。")],1)]),t._v(" "),s("p",[t._v("因为平衡直接映射和全相联的极端，组相联被广泛使用。")]),t._v(" "),s("h2",{attrs:{id:"缓存读取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存读取"}},[t._v("#")]),t._v(" 缓存读取")]),t._v(" "),s("p",[t._v("下图是CPU读取二路组相联缓存的过程示意图：")]),t._v(" "),s("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20201213191928073.png",width:"60%",alt:"CPU读取缓存过程示意图"}}),t._v(" "),s("p",[t._v("上图中一共列举了7个步骤。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("根据目标地址求得缓存块应在的组索引。")])]),t._v(" "),s("li",[s("p",[t._v("根据组索引在tag数组中获取相应组的标记。")])]),t._v(" "),s("li",[s("p",[t._v("从目标地址中求得标识，然后在SA（sensor amplifier，读出放大器）中与第2步中取得的标记进行比较，目的是确认目标地址是否在缓存中。如果存在匹配，那么缓存命中（cache hit），否则，缓存未命中（cache miss）。")])]),t._v(" "),s("li",[s("p",[t._v("在执行第2步和第3步的同时，从data数组中读取相应的缓存块。")])]),t._v(" "),s("li",[s("p",[t._v("如果在第3步中存在匹配，那么取出对应的缓存块。")])]),t._v(" "),s("li",[s("p",[t._v("根据地址中的缓存偏移（block offset）从第5步中取出的缓存块中读取数据。")])]),t._v(" "),s("li",[s("p",[t._v("将第6步中读取的数据递交给CPU。")])])]),t._v(" "),s("p",[t._v("以上7个步骤只是一般过程，在一些高性能的缓存中，上述步骤可能采用流水线来提高缓存读取吞吐量，从而可以处理多个缓存读取请求。而且在现实中为了满足各种需求，整个过程会十分复杂。比如步骤1，步骤2和步骤4可能被线性或并行执行。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("线性执行的优势是在确定缓存命中后，只需要读取data数组中同一组中对应的缓存块即可，如果缓存未命中，则不需要从data数组中读取数据。")])]),t._v(" "),s("li",[s("p",[t._v("并行执行的优势是在确定缓存命中或未命中时，相应的数据块已经被读取到了，接下来仅需要做的是找到对应的数据块以及块中对应的数据，该方法在缓存命中时会更快，但是效率却不高（在缓存未命中时尤为明显），因为同一组中的数据块都被读取了。")])])]),t._v(" "),s("p",[t._v("在某些设计中，"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("缓存采用并行执行，而"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("2")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L2")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("2")])])])])]),t._v("和"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("3")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L3")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("3")])])])])]),t._v("缓存采用线性执行，因为"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("缓存所要求达到的缓存命中率要更高，大部分情况下，步骤四不是徒劳的。")],1),t._v(" "),s("h2",{attrs:{id:"缓存替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存替换"}},[t._v("#")]),t._v(" 缓存替换")]),t._v(" "),s("p",[t._v("由于缓存空间远远小于主存空间，那么某些情况可能导致缓存满了，则需要进行缓存淘汰。具体的算法有下面几种：")]),t._v(" "),s("ul",[s("li",[t._v("最佳淘汰算法（OPT）： 该算法是理想化的，实际不能被实现。其指淘汰未来最久之后才使用的缓存块，由于不能确定未来的情况，所以该算法不能被实现，但是能够为其他算法的优劣提供评判依据。")]),t._v(" "),s("li",[t._v("最近最少使用（LRU）： 该算法被广为使用，其指淘汰过去一段时间内最少使用的缓存块。但是该算法在循坏访问同一组中的缓存块时（其单次循环读取的缓存块数量大于每组容纳的数量），会导致性能下降（因为会不断地进行替换）。")])]),t._v(" "),s("h2",{attrs:{id:"缓存写出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存写出"}},[t._v("#")]),t._v(" 缓存写出")]),t._v(" "),s("p",[t._v("当CPU修改了缓存的值，何时写出到外围存储器（可能是次级缓存也可能是主存）中是个重要的问题。主要有两种实现：")]),t._v(" "),s("ul",[s("li",[t._v("写通（write through）：指缓存中的任何修改都会被立即写出到主存中。")]),t._v(" "),s("li",[t._v("写回（write back）：指只有在缓存在被替换时，被修改过的缓存块才会被写出到外层存储器中，所以CPU的缓存行中需要一个比特位来标记该缓存行是否被更改过。")])]),t._v(" "),s("p",[t._v("芯片最外层缓存通常会采用写回策略，因为写通会占用更多的总线带宽。")]),t._v(" "),s("p",[t._v("另外，两者在容错性方面存在差异，由于某些软故障，可能会导致某些比特的值更改，从而使缓存块的值无效。写通策略的容错性更高一些，因为其有效数据已经被写到外围存储中了。采用写回策略的画，不仅需要错误探测，还需要错误纠正，通常采用纠错码（error correcting code [ECC]），但是ECC具有计算开销。因此，在很多实现中，"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("缓存采用写通策略，"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("2")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L2")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("2")])])])])]),t._v("缓存采用写回策略并用ECC加以保护数据。")],1),t._v(" "),s("p",[t._v("如果CPU所写的数据不在缓存中，那么也有两种实现：")]),t._v(" "),s("ul",[s("li",[t._v("写分配：在写之前，先从外层存储器中读取对应的缓存块，然后再修改。")]),t._v(" "),s("li",[t._v("写不分配：直接写出到对外层存储器中。")])]),t._v(" "),s("p",[t._v("如果所写内容所在的缓存块在将来不需要被读或写，那么采用写不分配会更佳，尤其是在内层缓存空间较小的情况下。反之，写分配更佳。写通策略既可以使用写分配也可以使用写不分配，而写回策略只有使用写分配策略。")]),t._v(" "),s("h2",{attrs:{id:"多级缓存的包含策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多级缓存的包含策略"}},[t._v("#")]),t._v(" 多级缓存的包含策略")]),t._v(" "),s("p",[t._v("在多级缓存中，内层缓存的内容是否同时需要在外层缓存中存在，这就引入了一个缓存包含问题。")]),t._v(" "),s("ul",[s("li",[t._v("如果外围缓存包含内层缓存的数据，那么则称为包含（inclusive）。")]),t._v(" "),s("li",[t._v("如果外围缓存不包含内层缓存的数据，那么则称为排斥（exclusive）。")]),t._v(" "),s("li",[t._v("inclusive和exclusive都需要某些协议来实现，如果没有协议支持，则可以实现既不包含也不排斥策略（non-inclusive non-exclusive [NINE]）。")])]),t._v(" "),s("p",[t._v("这里使用"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("（内层）和"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("2")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L2")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("2")])])])])]),t._v("（外层）缓存来举例，假设最开始，"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("2")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L2")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("2")])])])])]),t._v("缓存具有Z，"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("缓存为空。")],1),t._v(" "),s("p",[t._v("首先"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("缓存未命中X和Y，L2中也没有，那么则需要从主存中获取，这一步的状态如下图所示：")],1),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20201213212558276.png",alt:"image-20201213212558276"}})]),t._v(" "),s("p",[t._v("可见，在inclusive和NINE策略下，外层缓存保存了内层缓存的内容，则exclusive策略下，外层缓存则没有保存。")]),t._v(" "),s("p",[t._v("接下来在"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("缓存淘汰X，这一步的状态如下图所示：")],1),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20201213212838039.png",alt:"image-20201213212838039"}})]),t._v(" "),s("p",[t._v("可见，在exclusive策略下，外层缓存“收留”了被淘汰的数据。对于另外两种策略，其外层缓存中肯定存在副本，所以内层缓存直接淘汰即可。")]),t._v(" "),s("p",[t._v("接下来在"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("2")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L2")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("2")])])])])]),t._v("缓存中淘汰Y，这一步的状态如下图所示：")],1),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20201213213227938.png",alt:"image-20201213213227938"}})]),t._v(" "),s("p",[t._v("在inclusive模式下，外层缓存中数据淘汰导致内层缓存也跟着淘汰（向上失效）。在NINE策略下，则仅仅淘汰外层缓存的数据。这也是NINE和inclusive策略的区别。")]),t._v(" "),s("p",[t._v("最后，在"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("L")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")]),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v("未命中Z时，这一步的状态如下图所示：")],1),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20201213214508636.png",alt:"image-20201213214508636"}})]),t._v(" "),s("p",[t._v("在inclusive和NINE模式下，外层缓存都将数据拷贝到内层缓存中。而exclusive模式下，外层缓存在拷贝后将其淘汰掉。")]),t._v(" "),s("p",[t._v("除了上面对三种策略的基本定义之外，还有更多特性：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("inclusive策略：内层缓存所包含的数据一定在外层缓存中，外层缓存中没有的数据在内层缓存中一定没有。在某些核芯独享的缓存中遇到未命中的情况时，需要在其他核芯的缓存中去找，如果核芯数量多了，查找成本会很高，如果使用inclusive策略则不必去其他核芯中找，直接到外层缓存中找即可。")])]),t._v(" "),s("li",[s("p",[t._v("NINE策略：内层缓存所包含的数据，外层缓存一定有；外层缓存没有的数据，内层缓存仍然可能有。")])]),t._v(" "),s("li",[s("p",[t._v("exclusive策略：内存缓存所包含的数据，外层缓存一定没有，外层缓存包含的数据，内层缓存一定没有。")])]),t._v(" "),s("li",[s("p",[t._v("inclusive策略下，缓存未命中延迟更短，而另外两种则更长些。就算所有的缓存中都没有数据，那么inclusive策略下，也会更快地向主存中获取数据。")])]),t._v(" "),s("li",[s("p",[t._v("inclusive策略下，对外层缓存的利用率不高，尤其是在外层缓存的容量不大的情况下。")])]),t._v(" "),s("li",[s("p",[t._v("exclusive策略下，整体上缓存能够存放更多不同的缓存块，同时也会导致频繁地填充新的缓存块（内层缓存每次淘汰的外层缓存都会进行“收留”）。")])]),t._v(" "),s("li",[s("p",[t._v("NINE策略下，不保证缓存块的不存在。")])])]),t._v(" "),s("p",[s("font",{attrs:{color:"deeppink"}},[t._v("综上所述，设计者应该根据具体的缓存空间大小计算整体的缓存利用率来决定使用哪一种策略。")])],1),t._v(" "),s("h2",{attrs:{id:"缓存寻址和地址转换后备缓冲区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存寻址和地址转换后备缓冲区"}},[t._v("#")]),t._v(" 缓存寻址和地址转换后备缓冲区")]),t._v(" "),s("p",[t._v("CPU根据指令进行寻址，然而寻址操作的操作数是进程的虚拟地址空间地址，而不是真实物理内存的地址。而缓存中是根据物理内存地址来存储缓存块的，所以在寻址之前，CPU需要先将虚拟地址空间转换为物理内存的地址。进程的页表是存放在主存中的，而CPU在访问缓存之前就要译址，所以CPU也考虑将页表缓存到缓冲区中，这就是TLB（translation lookaside buffer）的由来。")]),t._v(" "),s("h2",{attrs:{id:"非阻塞缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞缓存"}},[t._v("#")]),t._v(" 非阻塞缓存")]),t._v(" "),s("p",[t._v("在早期处理器中，当缓存未命中时，CPU一直等到缓存块被读取到缓存中为止，这严重降低了性能。所以现代处理器引入了未命中状态处理寄存器（miss status handling registers [MSHRs]）。当缓存未命中时，为该次未命中分配一个该寄存器来跟踪获取情况，当读取到缓存时，在回收掉该寄存器。当寄存器分配后，即可处理下一个缓存查找的任务，从而大大提升了效率。")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://book.douban.com/subject/26912767/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《深入理解计算机系统（第三版）》"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.amazon.com/Fundamentals-Parallel-Multicore-Architecture-Solihin/dp/0367575280/ref=sr_1_1?crid=FJCGUSB0DB5A&dchild=1&keywords=fundamentals+of+parallel+multicore+architecture&qid=1607872319&sprefix=fundamental+of+para%2Caps%2C415&sr=8-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fundamentals of Parallel Multicore Architecture "),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);