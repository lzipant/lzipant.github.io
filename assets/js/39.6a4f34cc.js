(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{556:function(e,v,a){"use strict";a.r(v);var t=a(16),_=Object(t.a)({},(function(){var e=this,v=e.$createElement,a=e._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("在之前的"),a("a",{attrs:{href:"https://harrisonlee.net/pages/35e881/",target:"_blank",rel:"noopener noreferrer"}},[e._v("这篇文章"),a("OutboundLink")],1),e._v("中，探讨了MSI协议，在文末提到了MSI协议效率不高的问题，原因是因为不严格区分缓存块在多个私有缓存中共享和独享的情况，导致在实际独享的情况下修改缓存，也发出让其他缓存失效缓存的信号。")]),e._v(" "),a("p",[e._v("本文探讨的MESI协议就引入了独享状态，从而可以解决上述问题。")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),a("p",[e._v("本文翻译自"),a("a",{attrs:{href:"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.3279&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Memory Barriers: a Hardware View for Software Hackers"),a("OutboundLink")],1),e._v("一文的部分章节，同时相对原文有删改。")])]),e._v(" "),a("h2",{attrs:{id:"mesi协议定义的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mesi协议定义的状态"}},[e._v("#")]),e._v(" MESI协议定义的状态")]),e._v(" "),a("p",[e._v("MESI分别是四个状态的首字母：")]),e._v(" "),a("ul",[a("li",[e._v("Modified：表示缓存块最近被修改过，与内存中的数据不一致，同时在所有私有缓存中只有一份数据。")]),e._v(" "),a("li",[e._v("Exclusive：与Modified状态类似，唯一区别在于该缓存块没有被修改过，所以与内存中的数据一致。当CPU要修改该状态的缓存块时，不用与其他CPU协商。")]),e._v(" "),a("li",[e._v("Shared：表示至少在其他CPU中存在一份副本，所以当CPU修改该状态的缓存块时，需要先通知其他CPU。")]),e._v(" "),a("li",[e._v("Invalid：表示该缓存块无效，当读取时，发生缓存未命中。")])]),e._v(" "),a("h2",{attrs:{id:"mesi协议消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mesi协议消息"}},[e._v("#")]),e._v(" MESI协议消息")]),e._v(" "),a("p",[e._v("因为一个CPU内缓存块状态的变换需要通知其他的CPU，所以MESI定义了下面几种消息类型：")]),e._v(" "),a("ul",[a("li",[e._v("Read：该消息包含了所有读取的缓存块的物理地址，表示CPU读取某个缓存块。")]),e._v(" "),a("li",[e._v("Read Message：该消息表示对Read消息的响应，该响应可能来自主存，也有可能来自其他CPU。如果其他CPU存在缓存的有效副本，那么该消息一般是来自其他的CPU的。")]),e._v(" "),a("li",[e._v("Invalidate：该消息包含了所要失效的缓存块的物理地址，所有其他的CPU比如失效该地址所表示的缓存块。")]),e._v(" "),a("li",[e._v('Invalidate Acknowledge：该消息表示CPU接收到"invalidate"消息后的响应消息。')]),e._v(" "),a("li",[e._v('Read Invalidate：该消息是"Read"和"Invalidate"的组合，其他CPU必须让其私有缓存中的对应缓存块失效，该消息必须接收到"Read Response"和"Invalidate Acknowledge"消息作为响应。')]),e._v(" "),a("li",[e._v("Writeback：该消息表示缓存内的数据写回到主存。")])]),e._v(" "),a("h2",{attrs:{id:"mesi状态转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mesi状态转换"}},[e._v("#")]),e._v(" MESI状态转换")]),e._v(" "),a("p",[e._v("MESI状态转换如下图所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20210106161237557.png",alt:"image-20210106161237557"}})]),e._v(" "),a("ul",[a("li",[e._v("Transition a：缓存行被写回主存，但是CPU仍然保留该缓存。该转换产生一个"),a("strong",[e._v("Writeback")]),e._v("消息。")]),e._v(" "),a("li",[e._v("Transition b：CPU修改缓存行，由于CPU独享该缓存行，所以不会产生任何的消息。")]),e._v(" "),a("li",[e._v("Transition c：CPU接收到关于已修改缓存块的"),a("strong",[e._v("Read Invalidate")]),e._v("消息，那么CPU必须将本地相应的缓存块失效，同时发送一个"),a("strong",[e._v("Read Response")]),e._v("消息和一个"),a("strong",[e._v("Invalidate Acknowledge")]),e._v("消息。")]),e._v(" "),a("li",[e._v("Transition d：CPU执行修改操作，但是本地缓存中没有所要读取的数据，所以CPU发起"),a("strong",[e._v("Read")]),e._v("消息，然后通过"),a("strong",[e._v("Read Response")]),e._v("响应获取数据，"),a("strong",[e._v("注意CPU在接收到Invalidate Response后方能完成状态转换")]),e._v("。")]),e._v(" "),a("li",[e._v("Transition e：CPU执行修改操作，但是相应的本地缓存被共享，所以CPU必须发出"),a("strong",[e._v("Invalidate")]),e._v("，然后再等待"),a("strong",[e._v("Invalidate Acknowledge")]),e._v("消息才能够完成状态转换。")]),e._v(" "),a("li",[e._v("Transition f：其他CPU读取了当前CPU本地缓存中状态为已修改的缓存块，其他CPU发出"),a("strong",[e._v("Read")]),e._v("消息，当前CPU接收到后响应"),a("strong",[e._v("Read Response")]),e._v("消息，并提供对应的缓存块（该缓存块可能被写回主存）。")]),e._v(" "),a("li",[e._v("Transition g：其他CPU发出"),a("strong",[e._v("Read")]),e._v("消息，当前CPU响应"),a("strong",[e._v("Read Response")]),e._v("消息，并提供对应的缓存块。")]),e._v(" "),a("li",[e._v("Transition h：当前CPU意识到接下来会修改某些共享的缓存块，所以发送"),a("strong",[e._v("Invalidate")]),e._v("消息，**注意CPU必须在接收到Invalidation Response消息后方能完成状态转换。")]),e._v(" "),a("li",[e._v("Transition i：其他CPU执行修改操作，发出"),a("strong",[e._v("Read Invalidate")]),e._v("消息，当前CPU将本地缓存中的相应数据失效，同时响应"),a("strong",[e._v("Read Response")]),e._v("和"),a("strong",[e._v("Invalidate Acknowledge")]),e._v("消息。")]),e._v(" "),a("li",[e._v("Transition j：当前CPU后面可能需要执行修改操作，所以先获取到独占权，但是本地缓存中没有有效数据，所以发出"),a("strong",[e._v("Read Invalidate")]),e._v("消息，直到接收到"),a("strong",[e._v("Read Response")]),e._v("相应消息后方能完成状态转换。")]),e._v(" "),a("li",[e._v("Transition k：当前CPU读取本地缓存中没有的缓存块，发出"),a("strong",[e._v("Read")]),e._v("消息，接收到"),a("strong",[e._v("Read Response")]),e._v("响应消息从而获取到数据。")]),e._v(" "),a("li",[e._v("Transition l：其他CPU发出"),a("strong",[e._v("Invalidate")]),e._v("或"),a("strong",[e._v("Read Invalidate")]),e._v("消息，当前CPU必须将本地对应的共享缓存置为无效，同时返回"),a("strong",[e._v("Invalidate Acknowledge")]),e._v("消息。")])]),e._v(" "),a("p",[e._v("MESI协议引入Exclusive状态后，相比MSI协议提高了效率。因为修改Exclusive状态的缓存块不会发送任何消息（对应图中状态转化b），在MSI中修改的话对应图中状态转换e。")]),e._v(" "),a("p",[e._v("虽然MESI协议相比MSI协议效率更高，但是很多状态转换必须接收到响应消息后才能完成，比如CPU0修改CPU1中存在的数据，那么必须等到CPU1发出的"),a("strong",[e._v("Invalidate Acknowledge")]),e._v("消息才能完成，但是CPU0没必要等待这么久，因为是否接收到响应也不会影响CPU0所修改的值，只要CPU1将自己的本地缓存中对应的缓存块置为无效就可以保证一致性。")]),e._v(" "),a("p",[e._v("所以硬件工程师们为了进一步提高CPU的效率，又设计出了其他的优化方案，后面再写文介绍。")]),e._v(" "),a("p",[e._v("有一个MESI协议如何工作的可视化"),a("a",{attrs:{href:"https://www.scss.tcd.ie/~jones/vivio/caches/MESI.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("网页"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.3279&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Memory Barriers: a Hardware View for Software Hackers"),a("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=_.exports}}]);