(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{565:function(t,a,s){"use strict";s.r(a);var n=s(16),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("一般我们在使用Spring，SpringMVC开发web项目时，并没有手动创建容器，而只需要在配置文件中配置好bean的信息即可。一般我们会定义两个配置文件，一个spring的，一个springmvc的，然后将这两个配置文件的路径信息配置在web.xml文件中的。那么Spring容器是怎么启动的，如何将这两个配置文件关联到容器，以及使用父子容器有什么优缺点。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("本文分析的Spring版本为5.3.2。")])]),t._v(" "),s("h2",{attrs:{id:"创建父容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建父容器"}},[t._v("#")]),t._v(" 创建父容器")]),t._v(" "),s("p",[t._v("一般我们会通过以下配置指定父容器的配置信息，并且通过配置Servlet容器监听器，准备在Servlet容器启动时创建容器。")]),t._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("context-param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("param-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("contextConfigLocation"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("param-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("param-value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("classpath:applicationContext.xml"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("param-value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("context-param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("listener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("listener-class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        org.springframework.web.context.ContextLoaderListener\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("listener-class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("listener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("那么"),s("code",[t._v("ContextLoaderListener")]),t._v("就是分析的入口，该类实现了接口"),s("code",[t._v("ServletContextListener")]),t._v("，并继承了类"),s("code",[t._v("ContextLoader")]),t._v("。Servlet容器启动时，会调用"),s("code",[t._v("contextInitialized()")]),t._v("方法，在内部又调用"),s("code",[t._v("ContextLoader")]),t._v("的"),s("code",[t._v("initWebApplicationContext()")]),t._v("方法。")]),t._v(" "),s("p",[t._v("首先根据ServletContext判断是否已经创建过容器，如果没有创建则调用"),s("code",[t._v("createWebApplicationContext()")]),t._v("创建，在该方法内部，首先会调用"),s("code",[t._v("determineContextClass()")]),t._v("获取需要创建的容器的类型信息（Class对象），这是Spring为我们提供的一个扩展，如果我们配置了属性名为"),s("strong",[t._v("contextClass")]),t._v("的属性，那么Spring会创建该类型的容器，否则使用保存在org.springframework.web.context.ContextLoader.properties文件中的默认配置：")]),t._v(" "),s("div",{staticClass:"language-properties line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("org.springframework.web.context.WebApplicationContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("org.springframework.web.context.support.XmlWebApplicationContext")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("确定好容器类型就可以创建容器实例，然后回到"),s("code",[t._v("initWebApplicationContext()")]),t._v("中，会继续为容器设置父容器，当然默认为空实现。接下来继续调用"),s("code",[t._v("configureAndRefreshWebApplicationContext()")]),t._v("，在该方法中，从ServletContext中获取属性名为"),s("strong",[t._v("contextConfigLocation")]),t._v("的属性，这刚好就是我们在web.xml中配置的Spring配置文件路径，当然，如果我们不配置或者是不配置成"),s("strong",[t._v("contextConfigLocation")]),t._v("，则不会将配置绑定到容器中，但是还是会调用容器的"),s("code",[t._v("refresh()")]),t._v("方法。至此，父容器的创建过程基本完成。")]),t._v(" "),s("h2",{attrs:{id:"创建子容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建子容器"}},[t._v("#")]),t._v(" 创建子容器")]),t._v(" "),s("p",[t._v("在web.xml文件中我们还会配置DispatcherServlet，子容器的配置信息通过该Servlet配置传递给Spring。")]),t._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("dispatcherServlet"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.web.servlet.DispatcherServlet"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("init-param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("param-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("contextConfigLocation"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("param-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("param-value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("classpath:dispatcherServlet.xml"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("param-value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("init-param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("load-on-startup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("load-on-startup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("Servlet容器在调用了Servlet监听器后，就会调用Servlet的"),s("code",[t._v("init()")]),t._v("来实例化。"),s("code",[t._v("DispatcherServlet")]),t._v("的父类"),s("code",[t._v("HttpServletBean")]),t._v("重写了"),s("code",[t._v("init()")]),t._v("方法，所以子容器的创建过程就从这里开始。首先获取servlet的"),s("code",[t._v("ServletConfig")]),t._v("对象中保存的属性信息，其中就包括上述xml配置中的"),s("strong",[t._v("contextConfigLocation")]),t._v("属性，然后在"),s("code",[t._v("init()")]),t._v("中执行"),s("code",[t._v("bw.setPropertyValues(pvs, true);")]),t._v("，该调用链比较长，这里主要关注通过反射调用了"),s("code",[t._v("FrameworkServlet")]),t._v("的"),s("code",[t._v("setContextConfigLocation()")]),t._v("方法为其"),s("strong",[t._v("contextConfigLocation")]),t._v("属性赋了值。")]),t._v(" "),s("p",[t._v("回到"),s("code",[t._v("HttpServletBean")]),t._v("的"),s("code",[t._v("init()")]),t._v("方法，最后调用了"),s("code",[t._v("initServletBean()")]),t._v("方法，该方法被子类"),s("code",[t._v("FrameworkBean")]),t._v("重写。根据调用链，在"),s("code",[t._v("createWebApplicationContext()")]),t._v("方法中进行子容器的创建，并把从"),s("code",[t._v("ServletContext")]),t._v("中获取到的父容器设置为子容器的父容器。这里创建的子容器的Class是FrameworkServlet中的常量属性"),s("code",[t._v("DEFAULT_CONTEXT_CLASS")]),t._v("，其值为"),s("code",[t._v("XmlWebApplicationContext.class")]),t._v("。然后将上面进行赋值过的"),s("strong",[t._v("contextConfigLocation")]),t._v("属性绑定到容器中。如果该属性为null则不会绑定，但是仍然会调用容器的"),s("code",[t._v("refresh()")]),t._v("方法。至此，子容器的创建过程基本完成。")]),t._v(" "),s("h2",{attrs:{id:"父子容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#父子容器"}},[t._v("#")]),t._v(" 父子容器")]),t._v(" "),s("p",[t._v("通过以上分析，可知我们常见的配置会导致创建两个Spring容器，两个容器都是"),s("code",[t._v("XmlWebApplicationContext")]),t._v("类型的。一般我们开发都分为三层：Controller，Service，Dao，而将Service和Dao的bean注入父容器中，Controller层的bean注入子容器中。使用父子容器可以避免因为同一容器中同名bean无法共存的问题，可以避免service层注入controller层的bean，导致依赖混乱，因为父容器内无法获取到子容器的bean，而子容器可以获取到父容器的bean。")])])}),[],!1,null,null,null);a.default=e.exports}}]);