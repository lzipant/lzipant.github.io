(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{523:function(s,a,t){"use strict";t.r(a);var n=t(16),r=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("String的存储可能不是那么地直观，有些机制可能会违背我们的直觉。但是，这一问题又是面试的高频问题，同时理解好String的存储更有利于我们在写代码时更有底气。")]),s._v(" "),t("h2",{attrs:{id:"有哪些常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常量池"}},[s._v("#")]),s._v(" 有哪些常量池")]),s._v(" "),t("h3",{attrs:{id:"class常量池（class-constant-pool）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class常量池（class-constant-pool）"}},[s._v("#")]),s._v(" class常量池（Class Constant Pool）")]),s._v(" "),t("p",[s._v("Java的class文件中有一部分称作为常量池，包含字面量（literal）和符号引用（Symbolic Reference）。对于class文件可以使用javap命令查看class常量池的具体细节。可以发现，"),t("strong",[s._v("CONSTANT_Utf8_info")]),s._v("类型的常量可以表示文件中所有的标识符、字符串字面量等。")]),s._v(" "),t("h3",{attrs:{id:"运行时常量池（runtime-constant-pool）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池（runtime-constant-pool）"}},[s._v("#")]),s._v(" 运行时常量池（Runtime Constant Pool）")]),s._v(" "),t("p",[s._v("在类加载后，class常量池中的内容将被加载到运行时常量池。方法区是JVM所要求的运行时数据区的一部分，但是不同的虚拟机对此有不同的实现，比如HotSpot早期（JDK8以前）就利用了**永久代（Permanent Generation）**来实现方法区。但由于种种原因，Hotsport于JDK6开始就逐步废弃永久代；到了JDK7时，已经把字符串常量池，静态变量等移除了；到了JDK8，把永久代的剩余内容转移到了元空间(Metaspace）中。运行时常量池属于方法区，但是JVM并没有要求方法区位于内存的哪一部分。Hotspot在废弃永久代后，采用本地内存（native memory）来实现方法区（即Metaspace所处的位置）。")]),s._v(" "),t("h3",{attrs:{id:"字符串常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串常量池"}},[s._v("#")]),s._v(" 字符串常量池")]),s._v(" "),t("p",[s._v("因为Java中"),t("code",[s._v("String")]),s._v("类型的值都是不会变化的，采用字符串常量池可以提高性能和减少内存开销，因为当多个"),t("code",[s._v("String")]),s._v("引用指向的"),t("code",[s._v("String")]),s._v("值相等时，只需要保存一份值即可，让其他引用都指向这个值。当需要修改时，然后再拷贝一份进行修改（有点像CopyOnWrite的感觉），同样修改后的字符串也是不可更改的，同样存在字符串常量池中供其他"),t("code",[s._v("String")]),s._v("引用所指向。")]),s._v(" "),t("p",[s._v("JDK7之后，HotSpot就把字符串常量池从方法区中移出到了堆中，是一个哈希表结构，用于快速判断字符串对象是否已在常量池中。另外需要搞清楚，"),t("strong",[s._v("字符串常量池中存放的是java.lang.String对象的引用，而非对象本身")]),s._v("，在Java中所有的对象本身以及数组对象都保存在堆中。")]),s._v(" "),t("h2",{attrs:{id:"字符串字面量什么时候进入字符串常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串字面量什么时候进入字符串常量池"}},[s._v("#")]),s._v(" 字符串字面量什么时候进入字符串常量池")]),s._v(" "),t("p",[s._v("Java中的class文件中的常量池中有两类常量："),t("code",[s._v("CONSTANT_Utf8_info")]),s._v("和"),t("code",[s._v("CONSTANT_String_info")]),s._v("。前者存储真正的字符串内容，后者表示一个"),t("code",[s._v("java.lang.String")]),s._v("对象，存储的是前者类型的索引。")]),s._v(" "),t("p",[s._v("就HotSpot的实现来说，在类加载时，class中的常量池的内容进入了内存形成了运行时常量池。这些"),t("code",[s._v("CONSTANT_Utf8_info")]),s._v("只是简单地存储到运行时常量池中，但是不会在堆中创建对象（注意对象和简单地字符串值还是有区别的，对象除了包括值，还有其他相关属性），也不会保存到全局的字符串常量池中，这被称为类加载阶段的懒解析。")]),s._v(" "),t("p",[s._v("JVM中的ldc指令用于将int，float或String型常量值从常量池中推送至栈顶。前面讲到懒解析，ldc指令就是触发这个解析操作的。首先，通过"),t("code",[s._v("CONSTANT_String_info")]),s._v("中保存的"),t("code",[s._v("CONSTANT_Utf8_info")]),s._v("类型常量的索引找到对应的项，如果该项没有解析则进行解析，解析时涉及对象的创建，具体创建几个对象与"),t("code",[s._v("String")]),s._v("对象的定义方式有关，请参考下一节。")]),s._v(" "),t("h2",{attrs:{id:"string的定义方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string的定义方式"}},[s._v("#")]),s._v(" String的定义方式")]),s._v(" "),t("p",[s._v("Java程序员都知道如下两种字符串的定义方式：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第一种方式")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第二种方式")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"第一种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一种方式"}},[s._v("#")]),s._v(" 第一种方式")]),s._v(" "),t("p",[s._v("使用第一种方式时，JVM会去字符串常量池中找有没有值和当前字符串字面量相等的对象的引用。如果存在，则直接返回（创建0个对象）；如果不存在，则创建新对象，并把新对象的引用保存到字符串常量池中并返回（创建1个对象）。如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20210122145418130.png",alt:"image-20210122145418130"}})]),s._v(" "),t("h3",{attrs:{id:"第二种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二种方式"}},[s._v("#")]),s._v(" 第二种方式")]),s._v(" "),t("p",[s._v("使用第二种方式时，JVM同样会去找字符串常量池中有没有和当前字符串字面量相等的对象的引用。如果存在，则只管创建当前的对象（创建1个对象）；如果不存在，则会创建两个对象，其中1个对象的引用被保存到字符串常量池中，另一个对象的引用返回给变量。如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.harrisonlee.net/image-20210122145515037.png",alt:"image-20210122145515037"}})]),s._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[s._v("警告")]),s._v(" "),t("p",[s._v("对于下列代码：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("下面讲字符串拼接时会看到，s1其实也是通过new创建的。但是注意只有“harrison”和“lee”这种字面量保存到了常量池中，“harrisonlee”没有被保存到常量池中，也就是说表达式右边的两个new分别创建了两个对象，但是对于s1，只创建了一个。")])]),s._v(" "),t("h2",{attrs:{id:"字符串的拼接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串的拼接"}},[s._v("#")]),s._v(" 字符串的拼接")]),s._v(" "),t("p",[s._v("字符串的拼接可以使用运算符"),t("code",[s._v("+")]),s._v("，也可以调用字符串对象的方法"),t("code",[s._v("concat()")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"concat-拼接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concat-拼接"}},[s._v("#")]),s._v(" "),t("code",[s._v("concat()")]),s._v("拼接")]),s._v(" "),t("p",[s._v("如果参数的长度为0，那么将会返回调用者本身。如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrisonlee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("concat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("如果长度不为0，则通过new的方式创建对象（具体创建几个要看情况）。")]),s._v(" "),t("h3",{attrs:{id:"运算符拼接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符拼接"}},[s._v("#")]),s._v(" 运算符拼接")]),s._v(" "),t("p",[s._v("这部分，在JDK8和JDK11下测试结果不一致"),t("a",{attrs:{href:"%E7%9B%AE%E5%89%8D%E5%B0%9A%E4%B8%8D%E6%B8%85%E9%99%A4%E6%98%AF%E5%9C%A8%E5%93%AA%E4%B8%AA%E7%89%88%E6%9C%AC%E4%BA%A7%E7%94%9F%E5%8F%98%E5%8C%96%E7%9A%84%E3%80%82"}},[s._v("^1")]),s._v("。")]),s._v(" "),t("p",[s._v("如下列代码：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrisonlee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s5 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s6 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("在JDK8环境下，反编译后的结果如下：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrisonlee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s5 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s6 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrisonlee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("可见，如果拼接成分中全是字面量，那么编译器直接优化成拼接后的最后结果（如s6），在class常量池中也不存在单个字面量常量（除非在其他地方定义了），节省了字符串常量池的空间。如果拼接成分至少存在一个字符串对象的引用，那么编译器会优化为"),t("code",[s._v("StringBuilder")]),s._v("的方式，并调用"),t("code",[s._v("append()")]),s._v("方法实现拼接，最后的"),t("code",[s._v("toString()")]),s._v("方法内部是通过new方式创建的String对象。")]),s._v(" "),t("p",[s._v("在JDK11下，好像使用了与"),t("code",[s._v("concat()")]),s._v("相关的方法来处理。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test01")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    descriptor"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v("\n    flags"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x0001")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ACC_PUBLIC\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Code")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      stack"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" locals"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args_size"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ldc           #"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// String harrison")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" astore_1\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ldc           #"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// String lee")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" astore_2\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" aload_1\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" aload_2\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" invokedynamic #"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" astore_3\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ldc           #"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// String harrisonlee")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" astore        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" aload_2\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" invokedynamic #"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" astore        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ldc           #"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// String harrisonlee")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" astore        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("上面第8行和第19行，分别调用了invokedynamic指令。")]),s._v(" "),t("h2",{attrs:{id:"intern-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#intern-方法"}},[s._v("#")]),s._v(" "),t("code",[s._v("intern()")]),s._v("方法")]),s._v(" "),t("p",[t("code",[s._v("intern()")]),s._v("方法的作用是返回字符串常量池中保存的和当前字符串对象值相等的对象应用。如果存在，则直接返回；如果不存在，在JDK6前后的处理不一样。")]),s._v(" "),t("p",[s._v("对于下列代码（假设之前常量池中不存在字符串“harrison”）：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"harrison"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lee"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intern")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("如果是在JDK6及其之前，虚拟机的行为是另外新建一个对象，并把该对象的引用保存到字符串常量池中。所以输出false。")]),s._v(" "),t("p",[s._v("而如果是在JDK6之后，虚拟机会直接把该对象的引用保存到字符串常量池。所以输出true。JDK6以后"),t("code",[s._v("intern()")]),s._v("的行为明显避免了对象的创建，从而节省了空间。")]),s._v(" "),t("p",[s._v("总之一句话就是，"),t("code",[s._v("intern()")]),s._v("方法返回该常量池中与该String对象值相等的被收纳进入常量池中的对象引用。")]),s._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://javaranch.com/journal/200409/ScjpTipLine-StringsLiterally.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("The SCJP Tip Line  -- Strings, Literally"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.zhihu.com/question/55994121",target:"_blank",rel:"noopener noreferrer"}},[s._v("知乎问答：参考用户木女孩的回答以及评论区中R大的留言"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[s._v("《深入理解Java虚拟机（第3版）》")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);