(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{532:function(s,t,a){"use strict";a.r(t);var n=a(16),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("反射是Java中很重要的机制，虽然业务代码中很少用反射，但是各种框架中几乎都用到了反射。我们虽然不怎么使用反射，但必须要知道反射是怎么实现的。")]),s._v(" "),a("h2",{attrs:{id:"使用反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用反射"}},[s._v("#")]),s._v(" 使用反射")]),s._v(" "),a("p",[s._v("我们写的Java类在经过编译后，会生成字节码文件存储在磁盘上。在运行时，当第一次用到该类时会加载类，类加载后在内存中存在一个对应的Class对象，该对象是类的运行时表示。")]),s._v(" "),a("p",[s._v("所以反射的第一步，就要获取Class对象。")]),s._v(" "),a("h3",{attrs:{id:"获取class对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取class对象"}},[s._v("#")]),s._v(" 获取Class对象")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("通过数据类型的Class属性来获取：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// int")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// java.lang.Integer")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// void")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("注意，基本类型也是可以获取的，但和包装类型的类不一样。")])]),s._v(" "),a("li",[a("p",[s._v("对象的"),a("code",[s._v("getClass()")]),s._v("方法：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" integer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// java.lang.Integer")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("getClass()")]),s._v("方法是在"),a("code",[s._v("java.lang.Object")]),s._v("类中定义的。")])]),s._v(" "),a("li",[a("p",[s._v("通过静态方法"),a("code",[s._v("Class.forName()")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"java.lang.Integer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])])]),s._v(" "),a("p",[s._v("在获取了Class对象后，就可以反射创建实例，调用方法，获取字段等。")]),s._v(" "),a("h3",{attrs:{id:"创建实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建实例"}},[s._v("#")]),s._v(" 创建实例")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("通过Class对象的"),a("code",[s._v("newInstance()")]),s._v("方法：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    integer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" clazz1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InstantiationException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IllegalAccessException")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("该方法在Java 9中已经被标记"),a("code",[s._v("@Deprecated")]),s._v("了。")])]),s._v(" "),a("li",[a("p",[s._v("通过"),a("code",[s._v("Constructor")]),s._v("来构造，首先需要获取"),a("code",[s._v("Constructor")]),s._v("实例。如果Class对象表示的是接口，基本类型，数组或"),a("code",[s._v("void")]),s._v("，那么下面两个方法返回的数组的长度为0。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("getConstructors()")]),s._v("：返回对应Class中的所有public构造器。")]),s._v(" "),a("li",[a("code",[s._v("getDeclaredConstructors()")]),s._v("：返回对应Class中所有的构造器，不管访问权限。")])]),s._v(" "),a("p",[s._v("另外还有一些返回单个"),a("code",[s._v("Constructor")]),s._v("的方法，需要指定构造器的参数列表。如果Class是定义在非静态上下文中的内部类，那么形参列表的第一个参数表示外围类的Class对象。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("getConstructor()")]),s._v("：返回指定构造器，只能返回满足条件的public的构造器。")]),s._v(" "),a("li",[a("code",[s._v("getDeclaredConstructor()")]),s._v("：返回指定构造器，不受访问权限的约束。")])]),s._v(" "),a("p",[s._v("另外还有一个相关方法：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("getEnclosingConstructor()")]),s._v("：如果Class是定义在某个构造器中的局部内部类或匿名内部类，那么返回这个外围构造器，如果不存在则返回"),a("code",[s._v("null")]),s._v("。")])]),s._v(" "),a("p",[s._v("获取到"),a("code",[s._v("Constructor")]),s._v("后，可以调用其"),a("code",[s._v("newInstance()")]),s._v("方法来创建实例。但是注意，如果该"),a("code",[s._v("Constructor")]),s._v("表示的是非静态上下文中内部类的构造器，那么第一个参数需要指定为外围类的实例对象。")])])]),s._v(" "),a("h3",{attrs:{id:"获取字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取字段"}},[s._v("#")]),s._v(" 获取字段")]),s._v(" "),a("p",[s._v("和构造器一样，获取字段也有两组方法，要么返回多个要么返回一个。先来看返回多个的情况：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("getFields()")]),s._v("：返回类或接口中public的所有字段（包括父类或父接口），如果没有public的，则返回空数组。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredFields()")]),s._v("：返回所有不包含继承的字段，但包含所有权限修饰符所修饰的字段。获取到的private字段可以直接访问。")])])]),s._v(" "),a("p",[s._v("对于上面两个方法，如果Class表示数组，基本类型或"),a("code",[s._v("void")]),s._v("，那么返回空数组。")]),s._v(" "),a("p",[s._v("另外还有获取单个字段的方法，含义和上面两个方法类似。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("getField()")]),s._v(" ：根据名称，返回public字段（包含继承到的）。")]),s._v(" "),a("li",[a("code",[s._v("getDeclaredField()")]),s._v("：根据名称，返回不包含继承的字段（不受权限修饰符的影响）。")])]),s._v(" "),a("h3",{attrs:{id:"获取方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取方法"}},[s._v("#")]),s._v(" 获取方法")]),s._v(" "),a("p",[a("code",[s._v("Class")]),s._v("类提供了返回一个或多个"),a("code",[s._v("Method")]),s._v("的方法。下面两个方法会返回"),a("code",[s._v("Method")]),s._v("数组：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("getMethods()")]),s._v("：如果Class对象表示普通类，返回所有public方法（包括继承到的）；如果Class对象表示数组，返回"),a("code",[s._v("Object")]),s._v("类中除了"),a("code",[s._v("clone()")]),s._v("方法的所有方法；如果Class对象表示接口，返回的"),a("code",[s._v("Method")]),s._v("数组中不包含"),a("code",[s._v("Object")]),s._v("类中的方法。如果接口中没有声明方法，且其继承链上的接口也没有声明方法，那么返回空数组；注意对于类总是会从"),a("code",[s._v("Object")]),s._v('类中继承方法，所以不会返回空数组。返回的方法中不包含"<init>"和"<cinit>"方法。')]),s._v(" "),a("li",[a("code",[s._v("getDeclaredMethods()")]),s._v("：和"),a("code",[s._v("getMethods()")]),s._v("类似，会返回直接声明的所有方法（即不受访问权限修饰符约束），但是不包含通过继承得到的方法。")])]),s._v(" "),a("p",[s._v("下面三个方法会返回单个"),a("code",[s._v("Method")]),s._v("对象：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("getMethod()")]),s._v("：根据方法名和参数列表获取public方法，如果参数列表指定为null，会被看作空数组。继承规则和"),a("code",[s._v("getMethods()")]),s._v("一样。")]),s._v(" "),a("li",[a("code",[s._v("getDeclaredMethod()")]),s._v("：和"),a("code",[s._v("getMethod()")]),s._v("类似，但是无法获取继承而来的方法，且不受权限修饰符的约束。")]),s._v(" "),a("li",[a("code",[s._v("getEnclosingMethod()")]),s._v("：如果当前Class对象表示方法中的本地或匿名内部类，那么返回包含该内部类的方法；对于其他情况，返回null。")])]),s._v(" "),a("p",[s._v("不管对于"),a("code",[s._v("Constructor")]),s._v("，"),a("code",[s._v("Field")]),s._v("还是"),a("code",[s._v("Method")]),s._v("，如果当前对这些对象各自所表示的目标不具有访问权限，那么可以通过调用各自的"),a("code",[s._v("setAccessible(true)")]),s._v("方法，可以绕过JVM的权限检查。")]),s._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[s._v("笔记")]),s._v(" "),a("p",[s._v("关于 "),a("code",[s._v("setAccessible(true)")]),s._v("是否破坏了private的安全性。首先，private不是用来保证字段或方法的安全性的，而是为了面向对象思想中的"),a("strong",[s._v("封装")]),s._v("。private只是约束开发者遵守面向对象，而不是为了保证不能访问。")])]),s._v(" "),a("h2",{attrs:{id:"method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#method"}},[s._v("#")]),s._v(" Method")]),s._v(" "),a("p",[a("code",[s._v("Method")]),s._v("有一个方法叫"),a("code",[s._v("invoke")]),s._v("，这是Java反射的精髓，用来实现方法的被动调用。我们在SpringBoot项目中写的handlerMethod就是这样被调用的。")]),s._v(" "),a("p",[s._v("在JVM中有一个反射膨胀（inflation）机制：由于很多情况下反射只会调用一两次，所以JVM设置了一个名为"),a("code",[s._v("sun.reflect.inflation.Threshold")]),s._v("阈值，默认等于15。当反射方法的调用次数超过15次时，会使用ASM生成新的类，保证后面调用比native要快。当调用次数小于15时，直接用native的方式来调用，没有额外类的生成，校验，加载的开销。另外，还可以通过参数"),a("code",[s._v("sun.reflect.noInflation")]),s._v("来设置是否禁用反射膨胀机制，默认值为false。")])])}),[],!1,null,null,null);t.default=e.exports}}]);