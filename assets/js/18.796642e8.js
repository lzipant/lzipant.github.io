(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{535:function(t,s,a){"use strict";a.r(s);var n=a(16),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("关于Java中的"),a("code",[t._v("volatile")]),t._v("关键字，我个人认为是Java中最难理解的关键字了（太难了，没有之一 ）。笔者曾经因为不能很好理解该关键字，放弃了Java转而去学C，但是发现C里面也有"),a("code",[t._v("volatile")]),t._v("这个关键字（当时我的内心是崩溃的 😭）。很多资料也在说该关键字，但仍然没有解决笔者的疑惑，比如该关键字到底是怎么让多个CPU之间保证了可见性的？与缓存一致性协议又是怎样的关系？本文就来一一解释这些问题。")]),t._v(" "),a("h2",{attrs:{id:"两个问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两个问题"}},[t._v("#")]),t._v(" 两个问题")]),t._v(" "),a("p",[t._v("在分析"),a("code",[t._v("volatile")]),t._v("的原理之前，先来看一下两个经典的问题。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" isDone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// private static volatile boolean isDone;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      isDone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread A is done!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isDone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread B is done!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("上面是第一段程序，运行后会发现线程B不会结束。但是如果给"),a("code",[t._v("isDone")]),t._v("加上"),a("code",[t._v("volatile")]),t._v("关键字，一切就正常了。"),a("font",{attrs:{color:"deeppink"}},[t._v("这种问题被称为线程之间的可见性，也就是说volatile关键字保证了线程之间的可见性")]),t._v("。")],1),t._v(" "),a("p",[t._v("下面再来看一段程序：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// private static volatile Object singleton;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("上面是经典的实现单例模式的方法，被称为DCL（double check lock）。但是直接使用上面的实现，可能会抛出"),a("code",[t._v("NullPointerException")]),t._v("。但是如果给"),a("code",[t._v("singleton")]),t._v("加上"),a("code",[t._v("volatile")]),t._v("关键字，一切就正常了。"),a("font",{attrs:{color:"deeppink"}},[t._v("这种问题被称为指令重排序问题，也就是说volatile关键字保证了对被修饰的目标进行操作的执令不会被重排序")]),t._v("。")],1),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("关于DCL为什么会导致空指针异常的，这里做一个简单的补充。对于"),a("code",[t._v("new")]),t._v("操作，大致需要下面三个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("分配新对象内存。")]),t._v(" "),a("li",[t._v("调用类构造器初始化成员变量。")]),t._v(" "),a("li",[t._v("将内存分配到的地址写入对象引用中。")])]),t._v(" "),a("p",[t._v("所以，一个对象的创建并不是原子操作，完全有可能上面第三步在第二步之前执行，从而导致异常。")])]),t._v(" "),a("h2",{attrs:{id:"缓存一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性"}},[t._v("#")]),t._v(" 缓存一致性")]),t._v(" "),a("p",[t._v("现如今很多处理器都是多核的，每个CPU都有自己的私有缓存，访问同一内存的不同线程在不同的CPU中运行是很正常的事情，但是这样会导致一个问题，就是同一内存的数据在不同缓存中不一致了。为了解决这个问题，硬件工程师们引入了缓存一致性协议，这些协议规定了多CPU之间如何保证缓存的一致性。可以参考笔者之前写的关于CPU缓存的系列博客：")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://harrisonlee.net/pages/4e8b73/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU缓存的基础架构"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://harrisonlee.net/pages/856225/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU缓存一致性协议概述"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://harrisonlee.net/pages/35e881/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU缓存一致性协议之MSI"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://harrisonlee.net/pages/5709ee/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU缓存一致性协议之MESI"),a("OutboundLink")],1)])])]),t._v(" "),a("p",[t._v("注意，MESI协议只是缓存一致性协议中的一种，目前由Intel公司广泛使用。另外，还有其他笔者尚未提及到的缓存一致性协议，如广泛被AMD公司采用的MOESI协议。这些协议的名称中每个字母都表示缓存行的一种状态，一般状态越多，效率越高，但是实现难度越大。")]),t._v(" "),a("h2",{attrs:{id:"store-buffers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#store-buffers"}},[t._v("#")]),t._v(" Store Buffers")]),t._v(" "),a("p",[t._v("缓存一致性协议能够保证多CPU之间的缓存一致，但是为什么说"),a("code",[t._v("volatile")]),t._v("具有保证线程可见性的功能呢？也就是说既然有缓存一致性协议，那么为什么还需要"),a("code",[t._v("volatile")]),t._v("来保证一致性。")]),t._v(" "),a("p",[t._v("关于这个问题，也是困惑了笔者很久，究其原因还是对硬件细节了解不够。")]),t._v(" "),a("p",[t._v("在"),a("a",{attrs:{href:"https://harrisonlee.net/pages/5709ee/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU缓存一致性协议之MESI"),a("OutboundLink")],1),t._v("这篇文章末尾讲到，MESI协议规定在发出“read invalidate”或“validate”消息后只有收到其他CPU的“acknowledge”消息后才能执行写操作。但是在接收到“acknowledge”消息前后写入并不会影响最终写入的值，所以硬件工程师们为了提高缓存一致性协议的效率，又在CPU和其私有缓存之间引入了一个部件，叫做Store Buffers（又叫Write Buffers），关于这部分可以参考笔者之前的文章："),a("a",{attrs:{href:"https://harrisonlee.net/pages/b770ae/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU中的Store Buffers"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("引入Store Buffers后，对缓存的写操作不会因为缓存一致性消息的发送与接收而阻塞。但是这可能会导致一个问题，就是位于前面的指令的结果被写入了Store Buffers中，而位于后面的指令的结果被直接写入了缓存中，缓存一致性协议只能确保缓存中的一致，不能管理Store Buffers。所以，在其他CPU看来，该CPU对这两条指令进行了重排序，"),a("font",{attrs:{color:"deeppink"}},[t._v("而这种重排序可能导致线程之间的可见性问题")]),t._v("。而为了解决这种问题，从代码层面而言，就需要使用"),a("code",[t._v("volatile")]),t._v("，但是在CPU层面肯定不是"),a("code",[t._v("volatile")]),t._v("来解决问题的，具体细节请继续参考下文。")],1),t._v(" "),a("h2",{attrs:{id:"lock指令前缀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lock指令前缀"}},[t._v("#")]),t._v(" "),a("code",[t._v("lock")]),t._v("指令前缀")]),t._v(" "),a("p",[t._v("关于这部分，笔者直接引用从其他资料中查阅到的结果。")]),t._v(" "),a("p",[t._v("对于被"),a("code",[t._v("volatile")]),t._v("所修饰的变量执行写操作，会在该写操作后执行下面一句汇编代码：")]),t._v(" "),a("div",{staticClass:"language-assembly line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("lock addl $0x0,(%esp)\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("重点在于这个"),a("code",[t._v("lock")]),t._v("前缀，这个指令前缀的作用类似于内存屏障，内存屏障会标记Store Buffers中的变量，后序的写操作都会写入Store Buffers中，而不会直接写入缓存行中，当刷新Store Buffers时，也是先刷新先写入的（FIFO特性）。这样就保证了其他CPU先看到的结果一定是先执行的，从而避免了因重排序带来的可见性问题。")]),t._v(" "),a("p",[t._v("另外，"),a("code",[t._v("lock")]),t._v("前缀还能够让一些非原子指令具有原子性，如HotSpot中关于CAS的实现就利用了该前缀。在早期CPU中还没有缓存时，那时"),a("code",[t._v("lock")]),t._v("前缀会锁住总线，在当前指令结束之前其他CPU不能访问内存。当然，这种粗暴的方式效率肯定很低，后来的"),a("code",[t._v("lock")]),t._v("只会锁住其他CPU对于所锁住的内存地址的访问（无法发起缓存一致性消息）。")]),t._v(" "),a("p",[t._v("既然"),a("code",[t._v("lock")]),t._v("前缀能够让所修饰的指令变得具有原子性，而HotSpot中"),a("code",[t._v("volatile")]),t._v("也是基于"),a("code",[t._v("lock")]),t._v("前缀来实现的，那为什么说"),a("code",[t._v("volatile")]),t._v("不能保证缓存一致性呢？请注意，HotSpot只是在对变量修改指令的后面插入了一条"),a("code",[t._v("lock")]),t._v("指令，而不是让变量修改指令变得具有原子性。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("本文只是对CPU层面的指令重排序做了介绍，其实编译器还可能进行指令的重排序。Java内存模型中有一个先行发生原则（Happens-Before），该原则规定了一些操作必须在哪些操作之后进行，Java编译器不会对这些操作进行重排，但是对于其他的操作都是未定义的。"),a("code",[t._v("volatile")]),t._v("变量规则属于先行发生原则中的一种，所以Java编译器不会对由"),a("code",[t._v("volatile")]),t._v("修饰的变量进行过度优化。")])])}),[],!1,null,null,null);s.default=e.exports}}]);